public class HelpController extends AbstractController {

    private Stage stage;

    @FXML
    private AnchorPane Root;


    private final SwingNode SwingContainer = new SwingNode();

    private HelpSet helpSet;
    private String helpSetUrl = "";
    private JHelp helpComponent;

    @FXML
    public void initialize(){

        String helpUrl = LC.get("helpsetUrl");
        if (helpUrl == null) helpUrl = "LogisimFX/resources/doc/doc_en.hs";

        if (helpSet == null || !helpUrl.equals(helpSetUrl)) {

            ClassLoader loader = HelpController.class.getClassLoader();

            try {

                URL hsURL = HelpSet.findHelpSet(loader, helpUrl);

                if (hsURL == null) {
                    DialogManager.CreateErrorDialog("Error",LC.get("helpNotFoundError"));
                    return;
                }

                SwingUtilities.invokeAndWait(() -> {
                    try {
                        helpSet = new HelpSet(null, hsURL);
                        helpComponent = new JHelp(helpSet);
                        SwingContainer.setContent(helpComponent);

                        //updateSwing(helpComponent);
                    } catch (HelpSetException e) {
                        e.printStackTrace();
                    }
                });
                //helpSetUrl = helpUrl;
               // helpSet = new HelpSet(null, hsURL);
                //helpComponent = new JHelp(helpSet);

            } catch (Exception e) {
                e.printStackTrace();
                DialogManager.CreateErrorDialog("Error",LC.get("helpUnavailableError"));
                return;
            }

        }

        SwingContainer.setCache(true);
        SwingContainer.setCacheHint(CacheHint.SPEED);

        Root.getChildren().add(SwingContainer);

        AnchorPane.setLeftAnchor(SwingContainer,0.0);
        AnchorPane.setTopAnchor(SwingContainer,0.0);
        AnchorPane.setRightAnchor(SwingContainer,0.0);
        AnchorPane.setBottomAnchor(SwingContainer,0.0);

    }

    @Override
    public void postInitialization(Stage s) {

        stage = s;
        stage.titleProperty().bind(LC.createStringBinding("helpWindowTitle"));

        ChangeListener<Number> sizeChangeListener = (observable, oldValue, newValue) -> updateSwing(helpComponent);
        stage.widthProperty().addListener(sizeChangeListener);
        stage.heightProperty().addListener(sizeChangeListener);

        updateSwing(helpComponent);

    }

    private void updateSwing(JComponent content){

        SwingUtilities.invokeLater(() -> {
            if (content != null) {
                content.revalidate();
                content.repaint();
            }
        });

        SwingContainer.requestFocus();
        SwingContainer.autosize();

    }

    public void openChapter(String chapter){
        SwingUtilities.invokeLater(() -> helpComponent.setCurrentID(chapter));
    }


    @Override
    public void onClose() {
        System.out.println("Help closed");
    }

}